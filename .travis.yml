# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

env:
  global:
    - CRATE_NAME=cryptocorrosion

matrix:
  include:
    # Android
    #- env: TARGET=aarch64-linux-android DISABLE_TESTS=1
    #- env: TARGET=arm-linux-androideabi DISABLE_TESTS=1
    #- env: TARGET=armv7-linux-androideabi DISABLE_TESTS=1
    #- env: TARGET=i686-linux-android DISABLE_TESTS=1
    #- env: TARGET=x86_64-linux-android DISABLE_TESTS=1

    # iOS
    #- env: TARGET=aarch64-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=armv7-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=armv7s-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=i386-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=x86_64-apple-ios DISABLE_TESTS=1
    #  os: osx

    # Linux
    #- env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=arm-unknown-linux-gnueabi
    - env: TARGET=armv7-unknown-linux-gnueabihf PORTABLE_ONLY=1
    - env: TARGET=i686-unknown-linux-gnu PORTABLE_ONLY=1
    #- env: TARGET=i686-unknown-linux-musl
    #- env: TARGET=mips-unknown-linux-gnu
    - env: TARGET=mips64-unknown-linux-gnuabi64 PORTABLE_ONLY=1
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-linux-gnu
    #- env: TARGET=x86_64-unknown-linux-musl

    # OSX
    #- env: TARGET=i686-apple-darwin
    #  os: osx
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx

    # *BSD
    #- env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Windows
    #- env: TARGET=x86_64-pc-windows-gnu

    # Bare metal
    # These targets don't support std and as such are likely not suitable for
    # most crates.
    # - env: TARGET=thumbv6m-none-eabi
    # - env: TARGET=thumbv7em-none-eabi
    # - env: TARGET=thumbv7em-none-eabihf
    # - env: TARGET=thumbv7m-none-eabi

    # Testing other channels
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: stable
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: 1.31.1

    - env: DESCRIPTION="WASM via emscripten, stdweb and wasm-bindgen"
      rust: nightly
      install:
        - rustup target add wasm32-unknown-unknown
        - rustup target add wasm32-unknown-emscripten
        - nvm install 9
        - ./ci/install_cargo_web.sh
        - cargo web prepare-emscripten
        - cargo web -V
        - cargo list | grep install-update || cargo install -f cargo-update
        - cargo install-update -i cargo-update wasm-bindgen-cli wasm-pack
      addons:
        chrome: stable
      script:
        # Testing wasm32-unknown-emscripten fails because of rust-lang/rust#49877
        # However, we can still build and link all tests to make sure that works.
        # This is actually useful as it finds stuff such as rust-random/rand#669
        - EMCC_CFLAGS="-s ERROR_ON_UNDEFINED_SYMBOLS=0" cargo web test --target wasm32-unknown-emscripten --no-run -p c2-chacha
        #- cargo web test --target wasm32-unknown-emscripten -p c2-chacha
        #- cargo web test --nodejs --target wasm32-unknown-emscripten -p c2-chacha
        #- cargo build --target wasm32-unknown-unknown # without any features -p c2-chacha
        - cargo build --target wasm32-unknown-unknown --features=wasm-bindgen -p c2-chacha
        - cargo web test --target wasm32-unknown-unknown --features=stdweb -p c2-chacha
        - cargo build --manifest-path tests/wasm_bindgen/Cargo.toml --target wasm32-unknown-unknown -p c2-chacha
        - wasm-bindgen --nodejs target/wasm32-unknown-unknown/debug/rand_wasm_bindgen_test.wasm --out-dir tests/wasm_bindgen/js -p c2-chacha
        - node tests/wasm_bindgen/js/index.js -p c2-chacha
        - wasm-pack test --node tests/wasm_bindgen -p c2-chacha

before_install:
  - set -e
  - rustup self update

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

#before_deploy:
#  - sh ci/before_deploy.sh

#deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
  # - Paste the output down here
#  api_key:
#    secure: A9v3PIzQQ4U08OHFmDPQzNXbNHEb7YHyLXCvMF+dXFuNSvhUNlmQYykxqUf3dvikhJL2/bsZ14umm7ni7fQh0tGwJ4+lPpNzYAcweGgNXnWvjTpY6ovuRbr3gs4/srkyxp/GBDmSW5L8wFN3hKCB+Lm0YnIPB9IA2afP8a30+8VTXT9nv7pNqGny4ilN41ycr4DZi3sQoXdbruy7ClN7gsWW/GUiudBccHVIjmTapOFKLwZHODaUl/1/RDWQzh+i+17e1ivXuJPktDSrqmHPTZ15OjklnHKd6t179ry6VkGRg4R/R/YukVIqGzeaXGWAwdAQ5gE8cjGZghJLVi2jkDBJ85z8MvT+zLZLyliiuhLc/X8y7mkE1n0FKFtXXzFVt0l7V1LaEKbIbiV6XX3jsir4qgkqWjPHBZqO5mkGNFS16Dmt30/ZtEPAzXiINFXbWuWrpQ/LZ4NSto8IMrRTcoyDbAga/KYxJiNIeVuCe1E9dbytDM7K0GLtxJTul/WnnSeI6r//EFyC4bxYjyHhCXaag4q14KM+ak4rB0QgxsYzyGuh2MqyCoVj8YJLjLdKnL/SV7W7LPD40xlxvI6VCYTVi2ILHwL6vCxpukXYteX0c5IAIWkISDKu6nNBEgmCHXXPSqYSrgE5g7/QoCQHI8++nR8iKe0s7TWxZRydby8=
#  file_glob: true
#  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
#  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
#    condition: $TRAVIS_RUST_VERSION = stable
#    tags: true
#  provider: releases
#  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
